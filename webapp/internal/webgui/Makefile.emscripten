#
# Cross Platform Makefile
# Compatible with MSYS2/MINGW, Ubuntu 14.04.1 and Mac OS X
#
# You will need GLFW (http://www.glfw.org):
# Linux:
#   apt-get install libglfw-dev
# Mac OS X:
#   brew install glfw
# MSYS2:
#   pacman -S --noconfirm --needed mingw-w64-x86_64-toolchain mingw-w64-x86_64-glfw
# >>> compiledb make

#CXX = g++
#CXX = clang++

CC = emcc
CXX = em++

SRC_DIRS = ./src
BUILD_DIR = ./build
EXE = index.html 

LIBS_DIR = ./libs
IMGUI_DIR = ./include/imgui

# SOURCES = src/main.cpp
SOURCES := $(shell find $(SRC_DIRS) -name '*.cpp' -or -name '*.c' -or -name '*.s')
SOURCES += $(IMGUI_DIR)/backends/imgui_impl_glfw.cpp $(IMGUI_DIR)/backends/imgui_impl_opengl3.cpp
SOURCES += $(IMGUI_DIR)/imgui.cpp $(IMGUI_DIR)/imgui_demo.cpp $(IMGUI_DIR)/imgui_draw.cpp $(IMGUI_DIR)/imgui_tables.cpp $(IMGUI_DIR)/imgui_widgets.cpp
# OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))
OBJS := $(SOURCES:%=$(BUILD_DIR)/%.o)
LINUX_GL_LIBS = -lGL

LIBS =
CXXFLAGS = -std=c++17 -g -Wall -Wformat
CXXFLAGS += -I$(IMGUI_DIR) -I$(IMGUI_DIR)/backends

EMS += -s DISABLE_EXCEPTION_CATCHING=1
LIBS += -s USE_GLFW=3 -s WASM=1 -s ALLOW_MEMORY_GROWTH=1 -s NO_EXIT_RUNTIME=0 -s ASSERTIONS=1 -s EXPORTED_FUNCTIONS=_main,_malloc,_free -s EXPORTED_RUNTIME_METHODS=ccall

USE_FILE_SYSTEM ?= 1
ifeq ($(USE_FILE_SYSTEM), 0)
LDFLAGS += -s NO_FILESYSTEM=1
CPPFLAGS += -DIMGUI_DISABLE_FILE_FUNCTIONS
endif
ifeq ($(USE_FILE_SYSTEM), 1)
LDFLAGS += --no-heap-copy -O2 --preload-file ./data@/data
endif

CPPFLAGS += -I$(IMGUI_DIR) -I$(IMGUI_DIR)/backends -Iinclude
#CPPFLAGS += -g
CPPFLAGS += -Wall -Wformat -Os $(EMS)
LIBS += --shell-file ./libs/emscripten/shell_minimal.html
LIBS += $(EMS)
CPPFLAGS += $(shell pkg-config --cflags opencv4)
CPPFLAGS += -I./include/opencv_wasm
LDFLAGS += -L./include/opencv_wasm/lib -lopencv_calib3d -lopencv_dnn -lopencv_flann -lopencv_objdetect -lopencv_video -lopencv_core -lopencv_features2d -lopencv_imgproc -lopencv_photo

##---------------------------------------------------------------------
## BUILD RULES
##---------------------------------------------------------------------

# The final build step.
$(BUILD_DIR)/$(EXE): $(OBJS) $(BUILD_DIR)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LIBS) -o $@ $^ 

# Build step for C source
$(BUILD_DIR)/%.c.o: %.c
	mkdir -p $(dir $@)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) $(CFLAGS) -c -o $@ $< 

# Build step for C++ source
$(BUILD_DIR)/%.cpp.o: %.cpp
	mkdir -p $(dir $@)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $< 

$(BUILD_DIR):
	mkdir $@

all: $(EXE)
	@echo Build complete for $(ECHO_MESSAGE)

clean:
	rm -f $(EXE) $(OBJS)
